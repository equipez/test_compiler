
 Lahey/Fujitsu Fortran 95 Compiler Release L8.10b  Sun Dec 19 14:45:42 2021
 Copyright (C) 1994-2008 Lahey Computer Systems.  All rights reserved.
 Copyright (C) 1998-2008 FUJITSU LIMITED. All rights reserved.

 Compilation information
   Current directory : /home/zaikunzhang/Bureau/test_compiler
   Source file       : common/consts.F90
   Cpp options       : -Xs -Dunix -Dx86_64 -D__unix -D__x86_64 -D__ELF__ -D__x86_64__ -D__unix__ -D__linux__ -D__linux -Asystem(unix) -Asystem(posix) -Acpu(x86_64) -Amachine(x86_64) -Dlinux
   Compiler options  : --ap --nblock -c --chk aefosux --chkglobal --nco 
                     : --nconcc --dal --ndbl --f95 --nfast -g --in --info 
                     : --ninline --li --lst --nlong --maxfatals 50 --nml 
                     : --nmldefault --o0 --no --nocl --nopenmp --nparallel 
                     : --nprefetch --npca --nprivate --nquad --quiet --sav 
                     : --nshared --sse2 --nstaticlink --nswm --nthreadheap 
                     : --nthreads --trace --ntrap --nunroll --nvarheap 
                     : --nvarstack --nversion --warn --nwide --nwisk --wo --zfm 
                     : --xref

 Module "consts_mod"
  (line-no.)(nest)
          1        #include "ppf.h"
          2        
          3        module consts_mod
          4        !--------------------------------------------------------------------------------------------------!
          5        ! This is a module defining some constants.
          6        !
          7        ! Coded by Zaikun ZHANG (www.zhangzk.net).
          8        !
          9        ! Started: July 2020
         10        !
         11        ! Last Modified: Sunday, December 19, 2021 AM11:30:27
         12        !--------------------------------------------------------------------------------------------------!
         13        
         14        !--------------------------------------------------------------------------------------------------!
         15        ! Remarks:
         16        !
         17        ! 1. REAL*4, REAL*8, INTEGER*4, INTEGER*8 are not Fortran standard expressions. Do not use them!
         18        !
         19        ! 2. Never use KIND with a literal value, e.g., REAL(KIND = 8), because Fortran standards never
         20        ! define what KIND = 8 means. There is NO guarantee that REAL(KIND = 8) will be legal, let alone
         21        ! being double precision.
         22        !
         23        ! 3. Fortran standard (as of F2003) specifies the following for types INTEGER and REAL.
         24        !
         25        !    - A processor shall provide ONE OR MORE representation methods that define sets of values for
         26        !    data of type integer; if the kind type parameter is not specified, the default kind value is
         27        !    KIND(0) and the type specified is DEFAULT INTEGER.
         28        !    - A processor shall provide TWO OR MORE approximation methods that define sets of values for
         29        !    data of type real; if the type keyword REAL is specified and the kind type parameter is not
         30        !    specified, the default kind value is KIND (0.0) and the type specified is DEFAULT REAL; If the
         31        !    type keyword DOUBLE PRECISION is specified, the kind value is KIND (0.0D0) and the type
         32        !    specified is DOUBLE PRECISION real; the decimal precision of the double precision real
         33        !    approximation method shall be greater than that of the default real method.
         34        !
         35        !    In other words, the standard only imposes that the following three types should be supported:
         36        !    - INTEGER(KIND(0)), i.e., default integer,
         37        !    - REAL(KIND(0.0)), i.e., default real (single-precision real),
         38        !    - REAL(KIND(0.0D0)), i.e., double-precision real.
         39        !
         40        !    Therefore, the following should be noted.
         41        !
         42        !    - Other types of INTEGER/REAL may not be available on all platforms (e.g., nvfortran 20 and
         43        !    flang 7.1.0 do not support REAL128).
         44        !    - The standard does not specify the range of the default integer.
         45        !    - The standard does not specify what the range and precision of the default real or the
         46        !    double-precision real, except that KIND(0.0D0) should have a greater precision than KIND(0.0)
         47        !    --- no requirement about the range.
         48        !
         49        !    Consequently, the following should be observed in all Fortran code.
         50        !
         51        !    - DO NOT use any kind parameter other than IK, IK_DFT, RP, RP_DFT, SP, or DP, unless you are
         52        !    sure that it is supported by your platform.
         53        !    - DO NOT make any assumption on the range of INTEGER, REAL, or REAL(0.0D0) unless you are sure.
         54        !    - Be cautious about OVERFLOW! In particular, for integers working as the lower/upper limit of
         55        !    arrays, overflow can lead to Segmentation Faults!
         56        !--------------------------------------------------------------------------------------------------!
         57        
         58        #if __USE_ISO_FORTRAN_ENV_INTREAL__ == 1
         59        
         60        #if __INTEGER_KIND__ == 16
         61        use, intrinsic :: iso_fortran_env, only : INT16
         62        #elif __INTEGER_KIND__ == 32
         63        use, intrinsic :: iso_fortran_env, only : INT32
         64        #elif __INTEGER_KIND__ == 64
         65        use, intrinsic :: iso_fortran_env, only : INT64
         66        #endif
         67        
         68        
         69        use, intrinsic :: iso_fortran_env, only : REAL32, REAL64, REAL128
         70        ! The unsupported kind parameter will be negative.
         71        #endif
         72        
         73        implicit none
         74        private
         75        public :: DEBUGGING
         76        public :: IK, IK_DFT
         77        public :: RP, DP, SP, QP, RP_DFT
         78        public :: ZERO, ONE, TWO, HALF, QUART, TEN, TENTH, PI
         79        public :: REALMIN, EPS, HUGENUM, ALMOST_INFINITY, HUGEFUN, HUGECON
         80        public :: MSSGLEN, FNAMELEN
         81        public :: OUTUNIT
         82        public :: RHOBEG_DFT, RHOEND_DFT, FTARGET_DFT, CTOL_DFT, IPRINT_DFT
         83        public :: ETA1_DFT, ETA2_DFT, GAMMA1_DFT, GAMMA2_DFT
         84        public :: MAXFUN_DIM_DFT, MAXMEMORY, MAXFILT_DFT
         85        
         86        
         87        #if __DEBUGGING__ == 1
         88        logical, parameter :: DEBUGGING = .true.
         89        #else
         90        logical, parameter :: DEBUGGING = .false.
         91        #endif
         92        
         93        #if __USE_ISO_FORTRAN_ENV_INTREAL__ != 1
         94        ! For gfortran, SELECTED_REAL_KIND(K) returns INT16 with K = 3--4, INT32 with k = 5--9, and INT64
         95        ! with K = 10--18. SELECTED_REAL_KIND returns a negative value for an unsupported kind.
         96        #if __INTEGER_KIND__ == 16
         97        integer, parameter :: INT16 = selected_int_kind(4)
         98        #elif __INTEGER_KIND__ == 32
         99        integer, parameter :: INT32 = selected_int_kind(7)
        100        #elif __INTEGER_KIND__ == 64
        101        integer, parameter :: INT64 = selected_int_kind(14)
        102        #endif
        103        
        104        integer, parameter :: REAL32 = kind(0.0)
        105        integer, parameter :: REAL64 = kind(0.0D0)
        106        integer, parameter :: REAL128 = selected_real_kind(p=30)
        107        
        108        #endif
        109        integer, parameter :: IK_DFT = kind(0)  ! Default integer kind
        110        integer, parameter :: RP_DFT = kind(0.0)  ! Default real kind
        111        integer, parameter :: SP = REAL32  ! Kind for single precision
        112        integer, parameter :: DP = REAL64  ! Kind for double precision
        113        integer, parameter :: QP = REAL128  ! Kind for quadruple precision
        114        
        115        !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
        116        ! Define the integer kind to be used in the Fortran code.
        117        #if __INTEGER_KIND__  == 0
        118        integer, parameter :: IK = IK_DFT
        119        #elif __INTEGER_KIND__ == 16
        120        integer, parameter :: IK = INT16
        121        #elif __INTEGER_KIND__ == 32
        122        integer, parameter :: IK = INT32
        123        #elif __INTEGER_KIND__ == 64
        124        integer, parameter :: IK = INT64
        125        #else
        126        integer, parameter :: IK = IK_DFT
        127        #endif
        128        ! Define the real kind to be used in the Fortran code.
        129        #if __REAL_PRECISION__ == 0
        130        integer, parameter :: RP = RP_DFT
        131        #elif __REAL_PRECISION__ == 32
        132        integer, parameter :: RP = REAL32
        133        #elif __REAL_PRECISION__ == 64
        134        integer, parameter :: RP = REAL64
        135        #elif __REAL_PRECISION__ == 128
        136        integer, parameter :: RP = REAL128
        137        #else
        138        integer, parameter :: RP = REAL64  ! double precision
        139        #endif
        140        !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
        141        
        142        real(RP), parameter :: ZERO = 0.0_RP
        143        real(RP), parameter :: ONE = 1.0_RP
        144        real(RP), parameter :: TWO = 2.0_RP
        145        real(RP), parameter :: HALF = 0.5_RP
        146        real(RP), parameter :: QUART = 0.25_RP
        147        real(RP), parameter :: TEN = 10.0_RP
        148        real(RP), parameter :: TENTH = 0.1_RP
        149        real(RP), parameter :: PI = 3.141592653589793238462643383279502884_RP
        150        ! We may set PI to acos(-1.0_RP), but some compilers may complain about `Elemental function as
        151        ! initialization expression with non-integer or non-character arguments`.
        152        
        153        ! REALMIN is the smallest positive normalized floating-point number, which is 2^(-1022), ~2.225E-308
        154        ! for IEEE double precision. Taking double precision as an example, REALMIN in other languages:
        155        ! MATLAB: realmin or realmin('double')
        156        ! Python: numpy.finfo(numpy.float64).tiny
        157        ! Julia: realmin(Float64)
        158        real(RP), parameter :: REALMIN = tiny(ZERO)
        159        real(RP), parameter :: EPS = epsilon(ZERO)  ! Machine epsilon
        160        real(RP), parameter :: HUGENUM = huge(ZERO)
        161        real(RP), parameter :: ALMOST_INFINITY = HALF * HUGENUM
        162        
        163        integer, parameter :: MAXE = maxexponent(ZERO)
        164        real(RP), parameter :: HUGEFUN = TWO**min(100, MAXE / 2)
        165        real(RP), parameter :: HUGECON = HUGEFUN
        166        
        167        ! The maximal length of messages; used in output.f90 and fmexapi.F90
        168        integer, parameter :: MSSGLEN = 1000
        169        
        170        ! The maximal length of output file names; used in output.f90
        171        integer, parameter :: FNAMELEN = 1000
        172        
        173        ! Output unit, can be any integer between 9 and 99; used in output.f90
        174        integer, parameter :: OUTUNIT = 9
        175        
        176        ! Some default values
        177        real(RP), parameter :: RHOBEG_DFT = ONE
        178        real(RP), parameter :: RHOEND_DFT = 1.0E-6_RP
        179        real(RP), parameter :: FTARGET_DFT = -HUGENUM
        180        real(RP), parameter :: CTOL_DFT = EPS
        181        real(RP), parameter :: ETA1_DFT = TENTH
        182        real(RP), parameter :: ETA2_DFT = 0.7_RP
        183        real(RP), parameter :: GAMMA1_DFT = HALF
        184        real(RP), parameter :: GAMMA2_DFT = TWO
        185        integer(IK), parameter :: IPRINT_DFT = 0_IK
        186        integer(IK), parameter :: MAXFUN_DIM_DFT = 500_IK
        187        
        188        ! Maximal amount of memory (Byte) allowed for XHIST, FHIST, CONHIST, CHIST, and the filters.
        189        integer, parameter :: MXMMY = 21 * (10**8)   ! 21*10**8 = 2G.
        190        ! Make sure that MAXMEMORY does not exceed HUGE(0) to avoid overflow and memory errors.
        191        integer, parameter :: MAXMEMORY = min(MXMMY, huge(0))
        192        
        193        ! Maximal length of the filter used in constrained solvers.
        194        integer, parameter :: MAXFILT_DFT = 2000_IK
        195        
        196        end module consts_mod

 Procedure information
   Lines      : 462
   Statements : 56

 Scoping unit of module : consts_mod
   Attribute and Cross reference of name
     ALMOST_INFINITY
      |(Class and Type) : named constant, REAL(8)
      |(Attributes)     : PUBLIC
      |(Declaration)    : 79  161
      |(Definition)     : 
      |(Reference)      : 
     CTOL_DFT
      |(Class and Type) : named constant, REAL(8)
      |(Attributes)     : PUBLIC
      |(Declaration)    : 82  180
      |(Definition)     : 
      |(Reference)      : 
     consts_mod
      |(Class and Type) : module name
      |(Attributes)     : PRIVATE
      |(Declaration)    : 3
      |(Definition)     : 
      |(Reference)      : 196
     DEBUGGING
      |(Class and Type) : named constant, LOGICAL(4)
      |(Attributes)     : PUBLIC
      |(Declaration)    : 75  88
      |(Definition)     : 
      |(Reference)      : 
     DP
      |(Class and Type) : named constant, INTEGER(4)
      |(Attributes)     : PUBLIC
      |(Declaration)    : 77  112
      |(Definition)     : 
      |(Reference)      : 
     EPS
      |(Class and Type) : named constant, REAL(8)
      |(Attributes)     : PUBLIC
      |(Declaration)    : 79  159
      |(Definition)     : 
      |(Reference)      : 180
     ETA1_DFT
      |(Class and Type) : named constant, REAL(8)
      |(Attributes)     : PUBLIC
      |(Declaration)    : 83  181
      |(Definition)     : 
      |(Reference)      : 
     ETA2_DFT
      |(Class and Type) : named constant, REAL(8)
      |(Attributes)     : PUBLIC
      |(Declaration)    : 83  182
      |(Definition)     : 
      |(Reference)      : 
     epsilon
      |(Class and Type) : intrinsic function name, none
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 
      |(Reference)      : 159
     FNAMELEN
      |(Class and Type) : named constant, INTEGER(4)
      |(Attributes)     : PUBLIC
      |(Declaration)    : 80  171
      |(Definition)     : 
      |(Reference)      : 
     FTARGET_DFT
      |(Class and Type) : named constant, REAL(8)
      |(Attributes)     : PUBLIC
      |(Declaration)    : 82  179
      |(Definition)     : 
      |(Reference)      : 
     GAMMA1_DFT
      |(Class and Type) : named constant, REAL(8)
      |(Attributes)     : PUBLIC
      |(Declaration)    : 83  183
      |(Definition)     : 
      |(Reference)      : 
     GAMMA2_DFT
      |(Class and Type) : named constant, REAL(8)
      |(Attributes)     : PUBLIC
      |(Declaration)    : 83  184
      |(Definition)     : 
      |(Reference)      : 
     HALF
      |(Class and Type) : named constant, REAL(8)
      |(Attributes)     : PUBLIC
      |(Declaration)    : 78  145
      |(Definition)     : 
      |(Reference)      : 161  183
     HUGECON
      |(Class and Type) : named constant, REAL(8)
      |(Attributes)     : PUBLIC
      |(Declaration)    : 79  165
      |(Definition)     : 
      |(Reference)      : 
     HUGEFUN
      |(Class and Type) : named constant, REAL(8)
      |(Attributes)     : PUBLIC
      |(Declaration)    : 79  164
      |(Definition)     : 
      |(Reference)      : 165
     HUGENUM
      |(Class and Type) : named constant, REAL(8)
      |(Attributes)     : PUBLIC
      |(Declaration)    : 79  160
      |(Definition)     : 
      |(Reference)      : 161  179
     huge
      |(Class and Type) : intrinsic function name, none
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 
      |(Reference)      : 160  191
     IK
      |(Class and Type) : named constant, INTEGER(4)
      |(Attributes)     : PUBLIC
      |(Declaration)    : 76  118
      |(Definition)     : 
      |(Reference)      : 185  185  186  186  194
     IK_DFT
      |(Class and Type) : named constant, INTEGER(4)
      |(Attributes)     : PUBLIC
      |(Declaration)    : 76  109
      |(Definition)     : 
      |(Reference)      : 118
     IPRINT_DFT
      |(Class and Type) : named constant, INTEGER(4)
      |(Attributes)     : PUBLIC
      |(Declaration)    : 82  185
      |(Definition)     : 
      |(Reference)      : 
     kind
      |(Class and Type) : intrinsic function name, none
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 
      |(Reference)      : 104  105  109  110
     MAXE
      |(Class and Type) : named constant, INTEGER(4)
      |(Attributes)     : PRIVATE
      |(Declaration)    : 163
      |(Definition)     : 
      |(Reference)      : 164
     MAXFILT_DFT
      |(Class and Type) : named constant, INTEGER(4)
      |(Attributes)     : PUBLIC
      |(Declaration)    : 84  194
      |(Definition)     : 
      |(Reference)      : 
     MAXFUN_DIM_DFT
      |(Class and Type) : named constant, INTEGER(4)
      |(Attributes)     : PUBLIC
      |(Declaration)    : 84  186
      |(Definition)     : 
      |(Reference)      : 
     MAXMEMORY
      |(Class and Type) : named constant, INTEGER(4)
      |(Attributes)     : PUBLIC
      |(Declaration)    : 84  191
      |(Definition)     : 
      |(Reference)      : 
     MSSGLEN
      |(Class and Type) : named constant, INTEGER(4)
      |(Attributes)     : PUBLIC
      |(Declaration)    : 80  168
      |(Definition)     : 
      |(Reference)      : 
     MXMMY
      |(Class and Type) : named constant, INTEGER(4)
      |(Attributes)     : PRIVATE
      |(Declaration)    : 189
      |(Definition)     : 
      |(Reference)      : 191
     maxexponent
      |(Class and Type) : intrinsic function name, none
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 
      |(Reference)      : 163
     min
      |(Class and Type) : intrinsic function name, none
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 
      |(Reference)      : 164  191
     ONE
      |(Class and Type) : named constant, REAL(8)
      |(Attributes)     : PUBLIC
      |(Declaration)    : 78  143
      |(Definition)     : 
      |(Reference)      : 177
     OUTUNIT
      |(Class and Type) : named constant, INTEGER(4)
      |(Attributes)     : PUBLIC
      |(Declaration)    : 81  174
      |(Definition)     : 
      |(Reference)      : 
     PI
      |(Class and Type) : named constant, REAL(8)
      |(Attributes)     : PUBLIC
      |(Declaration)    : 78  149
      |(Definition)     : 
      |(Reference)      : 
     p
      |(Class and Type) : keyword argument name
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 
      |(Reference)      : 106
     QP
      |(Class and Type) : named constant, INTEGER(4)
      |(Attributes)     : PUBLIC
      |(Declaration)    : 77  113
      |(Definition)     : 
      |(Reference)      : 
     QUART
      |(Class and Type) : named constant, REAL(8)
      |(Attributes)     : PUBLIC
      |(Declaration)    : 78  146
      |(Definition)     : 
      |(Reference)      : 
     REAL128
      |(Class and Type) : named constant, INTEGER(4)
      |(Attributes)     : PRIVATE
      |(Declaration)    : 106
      |(Definition)     : 
      |(Reference)      : 113
     REAL32
      |(Class and Type) : named constant, INTEGER(4)
      |(Attributes)     : PRIVATE
      |(Declaration)    : 104
      |(Definition)     : 
      |(Reference)      : 111
     REAL64
      |(Class and Type) : named constant, INTEGER(4)
      |(Attributes)     : PRIVATE
      |(Declaration)    : 105
      |(Definition)     : 
      |(Reference)      : 112  134
     REALMIN
      |(Class and Type) : named constant, REAL(8)
      |(Attributes)     : PUBLIC
      |(Declaration)    : 79  158
      |(Definition)     : 
      |(Reference)      : 
     RHOBEG_DFT
      |(Class and Type) : named constant, REAL(8)
      |(Attributes)     : PUBLIC
      |(Declaration)    : 82  177
      |(Definition)     : 
      |(Reference)      : 
     RHOEND_DFT
      |(Class and Type) : named constant, REAL(8)
      |(Attributes)     : PUBLIC
      |(Declaration)    : 82  178
      |(Definition)     : 
      |(Reference)      : 
     RP
      |(Class and Type) : named constant, INTEGER(4)
      |(Attributes)     : PUBLIC
      |(Declaration)    : 77  134
      |(Definition)     : 
      |(Reference)      : 142  142  143  143  144  144  145  145  146  146  147  147  148  148  149  149  158  159  160  161  164  165  177  178  178  179  180  181  182  182  183  184
     RP_DFT
      |(Class and Type) : named constant, INTEGER(4)
      |(Attributes)     : PUBLIC
      |(Declaration)    : 77  110
      |(Definition)     : 
      |(Reference)      : 
     SP
      |(Class and Type) : named constant, INTEGER(4)
      |(Attributes)     : PUBLIC
      |(Declaration)    : 77  111
      |(Definition)     : 
      |(Reference)      : 
     selected_real_kind
      |(Class and Type) : intrinsic function name, none
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 
      |(Reference)      : 106
     TEN
      |(Class and Type) : named constant, REAL(8)
      |(Attributes)     : PUBLIC
      |(Declaration)    : 78  147
      |(Definition)     : 
      |(Reference)      : 
     TENTH
      |(Class and Type) : named constant, REAL(8)
      |(Attributes)     : PUBLIC
      |(Declaration)    : 78  148
      |(Definition)     : 
      |(Reference)      : 181
     TWO
      |(Class and Type) : named constant, REAL(8)
      |(Attributes)     : PUBLIC
      |(Declaration)    : 78  144
      |(Definition)     : 
      |(Reference)      : 164  184
     tiny
      |(Class and Type) : intrinsic function name, none
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 
      |(Reference)      : 158
     ZERO
      |(Class and Type) : named constant, REAL(8)
      |(Attributes)     : PUBLIC
      |(Declaration)    : 78  142
      |(Definition)     : 
      |(Reference)      : 158  159  160  163

 Total information
   Procedures       : 1
   Total lines      : 462
   Total statements : 56


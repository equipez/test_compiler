
 Lahey/Fujitsu Fortran 95 Compiler Release L8.10b  Thu Dec 16 16:43:11 2021
 Copyright (C) 1994-2008 Lahey Computer Systems.  All rights reserved.
 Copyright (C) 1998-2008 FUJITSU LIMITED. All rights reserved.

 Compilation information
   Current directory : /home/zaikunzhang/Bureau/test_compiler
   Source file       : common/consts.F90
   Cpp options       : -Xs -Dunix -Dx86_64 -D__unix -D__x86_64 -D__ELF__ -D__x86_64__ -D__unix__ -D__linux__ -D__linux -Asystem(unix) -Asystem(posix) -Acpu(x86_64) -Amachine(x86_64) -Dlinux
   Compiler options  : --ap --nblock -c --chk aefosux --chkglobal --nco 
                     : --nconcc --dal --ndbl --f95 --nfast -g --in --info 
                     : --ninline --li --lst --nlong --maxfatals 50 --nml 
                     : --nmldefault --o0 --no --nocl --nopenmp --nparallel 
                     : --nprefetch --npca --nprivate --nquad --quiet --sav 
                     : --nshared --sse2 --nstaticlink --nswm --nthreadheap 
                     : --nthreads --trace --ntrap --nunroll --nvarheap 
                     : --nvarstack --nversion --warn --nwide --nwisk --wo --zfm 
                     : --xref

 Module "consts_mod"
  (line-no.)(nest)
          1        #include "ppf.h"
          2        
          3        module consts_mod
          4        !--------------------------------------------------------------------------------------------------!
          5        ! This is a module defining some constants.
          6        !
          7        ! Coded by Zaikun ZHANG (www.zhangzk.net).
          8        !
          9        ! Started: July 2020
         10        !
         11        ! Last Modified: Friday, December 03, 2021 AM09:45:32
         12        !--------------------------------------------------------------------------------------------------!
         13        
         14        !--------------------------------------------------------------------------------------------------!
         15        ! Remarks:
         16        !
         17        ! 1. REAL*4, REAL*8, INTEGER*4, INTEGER*8 are not Fortran standard expressions. Do not use them!
         18        !
         19        ! 2. Never use KIND with a literal value, e.g., REAL(KIND = 8), because Fortran standards never
         20        ! define what KIND = 8 means. There is NO guarantee that REAL(KIND = 8) will be legal, let alone
         21        ! being double precision.
         22        !
         23        ! 3. Fortran standard (as of F2003) specifies the following for types INTEGER and REAL.
         24        !
         25        !    - A processor shall provide ONE OR MORE representation methods that define sets of values for
         26        !    data of type integer; if the kind type parameter is not specified, the default kind value is
         27        !    KIND(0) and the type specified is DEFAULT INTEGER.
         28        !    - A processor shall provide TWO OR MORE approximation methods that define sets of values for
         29        !    data of type real; if the type keyword REAL is specified and the kind type parameter is not
         30        !    specified, the default kind value is KIND (0.0) and the type specified is DEFAULT REAL; If the
         31        !    type keyword DOUBLE PRECISION is specified, the kind value is KIND (0.0D0) and the type
         32        !    specified is DOUBLE PRECISION real; the decimal precision of the double precision real
         33        !    approximation method shall be greater than that of the default real method.
         34        !
         35        !    In other words, the standard only imposes that the following three types should be supported:
         36        !    - INTEGER(KIND(0)), i.e., default integer,
         37        !    - REAL(KIND(0.0)), i.e., default real (single-precision real),
         38        !    - REAL(KIND(0.0D0)), i.e., double-precision real.
         39        !
         40        !    Therefore, the following should be noted.
         41        !
         42        !    - Other types of INTEGER/REAL may not be available on all platforms (e.g., nvfortran 20 and
         43        !    flang 7.1.0 do not support REAL128).
         44        !    - The standard does not specify the range of the default integer.
         45        !    - The standard does not specify what the range and precision of the default real or the
         46        !    double-precision real, except that KIND(0.0D0) should have a greater precision than KIND(0.0)
         47        !    --- no requirement about the range.
         48        !
         49        !    Consequently, the following should be observed in all Fortran code.
         50        !
         51        !    - DO NOT use any kind parameter other than IK, IK_DFT, RP, RP_DFT, SP, or DP, unless you are
         52        !    sure that it is supported by your platform.
         53        !    - DO NOT make any assumption on the range of INTEGER, REAL, or REAL(0.0D0) unless you are sure.
         54        !    - Be cautious about OVERFLOW! In particular, for integers working as the lower/upper limit of
         55        !    arrays, overflow can lead to Segmentation Faults!
         56        !--------------------------------------------------------------------------------------------------!
         57        
         58        #if __USE_ISO_FORTRAN_ENV_INTREAL__ == 1
         59        
         60        #if __INTEGER_KIND__ == 16
         61        use, intrinsic :: iso_fortran_env, only : INT16
         62        #elif __INTEGER_KIND__ == 32
         63        use, intrinsic :: iso_fortran_env, only : INT32
         64        #elif __INTEGER_KIND__ == 64
         65        use, intrinsic :: iso_fortran_env, only : INT64
         66        #endif
         67        
         68        
         69        use, intrinsic :: iso_fortran_env, only : REAL32, REAL64, REAL128
         70        ! The unsupported kind parameter will be negative.
         71        #endif
         72        
         73        implicit none
         74        private
         75        public :: DEBUGGING
         76        public :: IK, IK_DFT
         77        public :: RP, DP, SP, QP, RP_DFT
         78        public :: ZERO, ONE, TWO, HALF, QUART, TEN, TENTH, PI
         79        public :: EPS, HUGENUM, ALMOST_INFINITY, HUGEFUN, HUGECON
         80        public :: MSSGLEN, FNAMELEN
         81        public :: OUTUNIT
         82        public :: RHOBEG_DFT, RHOEND_DFT, FTARGET_DFT, IPRINT_DFT
         83        public :: MAXFUN_DIM_DFT, MAXMEMORY
         84        
         85        
         86        #if __DEBUGGING__ == 1
         87        logical, parameter :: DEBUGGING = .true.
         88        #else
         89        logical, parameter :: DEBUGGING = .false.
         90        #endif
         91        
         92        #if __USE_ISO_FORTRAN_ENV_INTREAL__ != 1
         93        ! For gfortran, SELECTED_REAL_KIND(K) returns INT16 with K = 3--4, INT32 with k = 5--9, and INT64
         94        ! with K = 10--18. SELECTED_REAL_KIND returns a negative value for an unsupported kind.
         95        #if __INTEGER_KIND__ == 16
         96        integer, parameter :: INT16 = selected_int_kind(4)
         97        #elif __INTEGER_KIND__ == 32
         98        integer, parameter :: INT32 = selected_int_kind(7)
         99        #elif __INTEGER_KIND__ == 64
        100        integer, parameter :: INT64 = selected_int_kind(14)
        101        #endif
        102        
        103        integer, parameter :: REAL32 = kind(0.0)
        104        integer, parameter :: REAL64 = kind(0.0D0)
        105        integer, parameter :: REAL128 = selected_real_kind(p=30)
        106        
        107        #endif
        108        integer, parameter :: IK_DFT = kind(0)  ! Default integer kind
        109        integer, parameter :: RP_DFT = kind(0.0)  ! Default real kind
        110        integer, parameter :: SP = REAL32  ! Kind for single precision
        111        integer, parameter :: DP = REAL64  ! Kind for double precision
        112        integer, parameter :: QP = REAL128  ! Kind for quadruple precision
        113        
        114        !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
        115        ! Define the integer kind to be used in the Fortran code.
        116        #if __INTEGER_KIND__  == 0
        117        integer, parameter :: IK = IK_DFT
        118        #elif __INTEGER_KIND__ == 16
        119        integer, parameter :: IK = INT16
        120        #elif __INTEGER_KIND__ == 32
        121        integer, parameter :: IK = INT32
        122        #elif __INTEGER_KIND__ == 64
        123        integer, parameter :: IK = INT64
        124        #else
        125        integer, parameter :: IK = IK_DFT
        126        #endif
        127        ! Define the real kind to be used in the Fortran code.
        128        #if __REAL_PRECISION__ == 0
        129        integer, parameter :: RP = RP_DFT
        130        #elif __REAL_PRECISION__ == 32
        131        integer, parameter :: RP = REAL32
        132        #elif __REAL_PRECISION__ == 64
        133        integer, parameter :: RP = REAL64
        134        #elif __REAL_PRECISION__ == 128
        135        integer, parameter :: RP = REAL128
        136        #else
        137        integer, parameter :: RP = REAL64  ! double precision
        138        #endif
        139        !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
        140        
        141        real(RP), parameter :: ZERO = 0.0_RP
        142        real(RP), parameter :: ONE = 1.0_RP
        143        real(RP), parameter :: TWO = 2.0_RP
        144        real(RP), parameter :: HALF = 0.5_RP
        145        real(RP), parameter :: QUART = 0.25_RP
        146        real(RP), parameter :: TEN = 10.0_RP
        147        real(RP), parameter :: TENTH = 0.1_RP
        148        real(RP), parameter :: PI = 3.141592653589793238462643383279502884_RP
        149        ! We may set PI to acos(-1.0_RP), but some compilers may complain about `Elemental function as
        150        ! initialization expression with non-integer or non-character arguments`.
        151        
        152        real(RP), parameter :: EPS = epsilon(ZERO)
        153        real(RP), parameter :: HUGENUM = huge(ZERO)
        154        real(RP), parameter :: ALMOST_INFINITY = HALF * HUGENUM
        155        
        156        integer, parameter :: MAXE = maxexponent(ZERO)
        157        real(RP), parameter :: HUGEFUN = TWO**min(100, MAXE / 2)
        158        real(RP), parameter :: HUGECON = HUGEFUN
        159        
        160        ! The maximal length of messages; used in output.f90 and fmexapi.F90
        161        integer, parameter :: MSSGLEN = 1000
        162        
        163        ! The maximal length of output file names; used in output.f90
        164        integer, parameter :: FNAMELEN = 1000
        165        
        166        ! Output unit, can be any integer between 9 and 99; used in output.f90
        167        integer, parameter :: OUTUNIT = 9
        168        
        169        ! Some default values
        170        real(RP), parameter :: RHOBEG_DFT = ONE
        171        real(RP), parameter :: RHOEND_DFT = 1.0E-6_RP
        172        real(RP), parameter :: FTARGET_DFT = -HUGENUM
        173        integer(IK), parameter :: IPRINT_DFT = 0_IK
        174        integer(IK), parameter :: MAXFUN_DIM_DFT = 500_IK
        175        
        176        ! Maximal amount of memory (Byte) allowed for XHIST, FHIST, CONHIST, CHIST
        177        integer, parameter :: MXMMY = 21 * (10**8)   ! 21*10**8 = 2G.
        178        ! Make sure that MAXMEMORY does not exceed HUGE(0) to avoid overflow and memory errors.
        179        integer, parameter :: MAXMEMORY = min(MXMMY, huge(0))
        180        
        181        
        182        end module consts_mod

 Procedure information
   Lines      : 448
   Statements : 49

 Scoping unit of module : consts_mod
   Attribute and Cross reference of name
     ALMOST_INFINITY
      |(Class and Type) : named constant, REAL(4)
      |(Attributes)     : PUBLIC
      |(Declaration)    : 79  154
      |(Definition)     : 
      |(Reference)      : 
     consts_mod
      |(Class and Type) : module name
      |(Attributes)     : PRIVATE
      |(Declaration)    : 3
      |(Definition)     : 
      |(Reference)      : 182
     DEBUGGING
      |(Class and Type) : named constant, LOGICAL(4)
      |(Attributes)     : PUBLIC
      |(Declaration)    : 75  87
      |(Definition)     : 
      |(Reference)      : 
     DP
      |(Class and Type) : named constant, INTEGER(4)
      |(Attributes)     : PUBLIC
      |(Declaration)    : 77  111
      |(Definition)     : 
      |(Reference)      : 
     EPS
      |(Class and Type) : named constant, REAL(4)
      |(Attributes)     : PUBLIC
      |(Declaration)    : 79  152
      |(Definition)     : 
      |(Reference)      : 
     epsilon
      |(Class and Type) : intrinsic function name, none
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 
      |(Reference)      : 152
     FNAMELEN
      |(Class and Type) : named constant, INTEGER(4)
      |(Attributes)     : PUBLIC
      |(Declaration)    : 80  164
      |(Definition)     : 
      |(Reference)      : 
     FTARGET_DFT
      |(Class and Type) : named constant, REAL(4)
      |(Attributes)     : PUBLIC
      |(Declaration)    : 82  172
      |(Definition)     : 
      |(Reference)      : 
     HALF
      |(Class and Type) : named constant, REAL(4)
      |(Attributes)     : PUBLIC
      |(Declaration)    : 78  144
      |(Definition)     : 
      |(Reference)      : 154
     HUGECON
      |(Class and Type) : named constant, REAL(4)
      |(Attributes)     : PUBLIC
      |(Declaration)    : 79  158
      |(Definition)     : 
      |(Reference)      : 
     HUGEFUN
      |(Class and Type) : named constant, REAL(4)
      |(Attributes)     : PUBLIC
      |(Declaration)    : 79  157
      |(Definition)     : 
      |(Reference)      : 158
     HUGENUM
      |(Class and Type) : named constant, REAL(4)
      |(Attributes)     : PUBLIC
      |(Declaration)    : 79  153
      |(Definition)     : 
      |(Reference)      : 154  172
     huge
      |(Class and Type) : intrinsic function name, none
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 
      |(Reference)      : 153  179
     IK
      |(Class and Type) : named constant, INTEGER(4)
      |(Attributes)     : PUBLIC
      |(Declaration)    : 76  119
      |(Definition)     : 
      |(Reference)      : 173  173  174  174
     IK_DFT
      |(Class and Type) : named constant, INTEGER(4)
      |(Attributes)     : PUBLIC
      |(Declaration)    : 76  108
      |(Definition)     : 
      |(Reference)      : 
     INT16
      |(Class and Type) : named constant, INTEGER(4)
      |(Attributes)     : PRIVATE
      |(Declaration)    : 96
      |(Definition)     : 
      |(Reference)      : 119
     IPRINT_DFT
      |(Class and Type) : named constant, INTEGER(2)
      |(Attributes)     : PUBLIC
      |(Declaration)    : 82  173
      |(Definition)     : 
      |(Reference)      : 
     kind
      |(Class and Type) : intrinsic function name, none
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 
      |(Reference)      : 103  104  108  109
     MAXE
      |(Class and Type) : named constant, INTEGER(4)
      |(Attributes)     : PRIVATE
      |(Declaration)    : 156
      |(Definition)     : 
      |(Reference)      : 157
     MAXFUN_DIM_DFT
      |(Class and Type) : named constant, INTEGER(2)
      |(Attributes)     : PUBLIC
      |(Declaration)    : 83  174
      |(Definition)     : 
      |(Reference)      : 
     MAXMEMORY
      |(Class and Type) : named constant, INTEGER(4)
      |(Attributes)     : PUBLIC
      |(Declaration)    : 83  179
      |(Definition)     : 
      |(Reference)      : 
     MSSGLEN
      |(Class and Type) : named constant, INTEGER(4)
      |(Attributes)     : PUBLIC
      |(Declaration)    : 80  161
      |(Definition)     : 
      |(Reference)      : 
     MXMMY
      |(Class and Type) : named constant, INTEGER(4)
      |(Attributes)     : PRIVATE
      |(Declaration)    : 177
      |(Definition)     : 
      |(Reference)      : 179
     maxexponent
      |(Class and Type) : intrinsic function name, none
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 
      |(Reference)      : 156
     min
      |(Class and Type) : intrinsic function name, none
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 
      |(Reference)      : 157  179
     ONE
      |(Class and Type) : named constant, REAL(4)
      |(Attributes)     : PUBLIC
      |(Declaration)    : 78  142
      |(Definition)     : 
      |(Reference)      : 170
     OUTUNIT
      |(Class and Type) : named constant, INTEGER(4)
      |(Attributes)     : PUBLIC
      |(Declaration)    : 81  167
      |(Definition)     : 
      |(Reference)      : 
     PI
      |(Class and Type) : named constant, REAL(4)
      |(Attributes)     : PUBLIC
      |(Declaration)    : 78  148
      |(Definition)     : 
      |(Reference)      : 
     p
      |(Class and Type) : keyword argument name
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 
      |(Reference)      : 105
     QP
      |(Class and Type) : named constant, INTEGER(4)
      |(Attributes)     : PUBLIC
      |(Declaration)    : 77  112
      |(Definition)     : 
      |(Reference)      : 
     QUART
      |(Class and Type) : named constant, REAL(4)
      |(Attributes)     : PUBLIC
      |(Declaration)    : 78  145
      |(Definition)     : 
      |(Reference)      : 
     REAL128
      |(Class and Type) : named constant, INTEGER(4)
      |(Attributes)     : PRIVATE
      |(Declaration)    : 105
      |(Definition)     : 
      |(Reference)      : 112
     REAL32
      |(Class and Type) : named constant, INTEGER(4)
      |(Attributes)     : PRIVATE
      |(Declaration)    : 103
      |(Definition)     : 
      |(Reference)      : 110  131
     REAL64
      |(Class and Type) : named constant, INTEGER(4)
      |(Attributes)     : PRIVATE
      |(Declaration)    : 104
      |(Definition)     : 
      |(Reference)      : 111
     RHOBEG_DFT
      |(Class and Type) : named constant, REAL(4)
      |(Attributes)     : PUBLIC
      |(Declaration)    : 82  170
      |(Definition)     : 
      |(Reference)      : 
     RHOEND_DFT
      |(Class and Type) : named constant, REAL(4)
      |(Attributes)     : PUBLIC
      |(Declaration)    : 82  171
      |(Definition)     : 
      |(Reference)      : 
     RP
      |(Class and Type) : named constant, INTEGER(4)
      |(Attributes)     : PUBLIC
      |(Declaration)    : 77  131
      |(Definition)     : 
      |(Reference)      : 141  141  142  142  143  143  144  144  145  145  146  146  147  147  148  148  152  153  154  157  158  170  171  171  172
     RP_DFT
      |(Class and Type) : named constant, INTEGER(4)
      |(Attributes)     : PUBLIC
      |(Declaration)    : 77  109
      |(Definition)     : 
      |(Reference)      : 
     SP
      |(Class and Type) : named constant, INTEGER(4)
      |(Attributes)     : PUBLIC
      |(Declaration)    : 77  110
      |(Definition)     : 
      |(Reference)      : 
     selected_int_kind
      |(Class and Type) : intrinsic function name, none
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 
      |(Reference)      : 96
     selected_real_kind
      |(Class and Type) : intrinsic function name, none
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 
      |(Reference)      : 105
     TEN
      |(Class and Type) : named constant, REAL(4)
      |(Attributes)     : PUBLIC
      |(Declaration)    : 78  146
      |(Definition)     : 
      |(Reference)      : 
     TENTH
      |(Class and Type) : named constant, REAL(4)
      |(Attributes)     : PUBLIC
      |(Declaration)    : 78  147
      |(Definition)     : 
      |(Reference)      : 
     TWO
      |(Class and Type) : named constant, REAL(4)
      |(Attributes)     : PUBLIC
      |(Declaration)    : 78  143
      |(Definition)     : 
      |(Reference)      : 157
     ZERO
      |(Class and Type) : named constant, REAL(4)
      |(Attributes)     : PUBLIC
      |(Declaration)    : 78  141
      |(Definition)     : 
      |(Reference)      : 152  153  156

 Total information
   Procedures       : 1
   Total lines      : 448
   Total statements : 49

